res    = 600,
width  = 6000,
height = 6000)
# pcaExplorer(dds = dds_ploidy)
setwd('..')
setwd('..')
# Generate Contrasts
contrast_list    <- c("trt","territorial", "social")
res_table        <- results(dds, contrast=contrast_list, alpha = 0.05)
res_table_normal <- lfcShrink(dds,
coef=2,
type="normal") # lfcThreshold = 0.585)  # a lfc threshold of 1 = 2-fold change, 0.585 = 1.5-fold change
res_table_apeglm <- lfcShrink(dds,
coef=2,
type="apeglm") # lfcThreshold = 0.585)  # a lfc threshold of 1 = 2-fold change, 0.585 = 1.5-fold change
res_table_ashr   <- lfcShrink(dds,
coef=2,
type="ashr")
# Plot MA
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
DESeq2::plotMA(res_table_normal, xlim=xlim, ylim=ylim, main="normal", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(res_table_apeglm, xlim=xlim, ylim=ylim, main="apeglm", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(res_table_ashr, xlim=xlim, ylim=ylim, main="ashr", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
pdf(file= "DESEQ_output/gonad/MA_plots.pdf" )
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
DESeq2::plotMA(res_table_normal, xlim=xlim, ylim=ylim, main="normal", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(res_table_apeglm, xlim=xlim, ylim=ylim, main="apeglm", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(res_table_ashr, xlim=xlim, ylim=ylim, main="ashr", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
dev.off()
# Set cut.offs
padj.cutoff <- 0.05 # pvalues not produced with apeglm shrinkage estimator
svalue.cutoff <- 0.005 # 0.005 corresponds to pvalue of 0.05
lfc.cutoff <- 1.5 # fold-change cutoff, 1.5 or 2-fold is recommended
# Rearrange tables by gene
res_table <- res_table %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
res_table_normal <- res_table_normal %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
res_table_apeglm <- res_table_apeglm %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
res_table_ashr <- res_table_ashr %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
# How many genes are differentially expressed compared to Control?
colnames(Onerka_feature_table) <- c("gene","description")
all_genes           <- left_join(res_table, Onerka_feature_table, by = "gene")
all_genes           <- all_genes %>% arrange(-log2FoldChange)
all_genes$treatment <- "gonad"
# all_genes_pvalue    <- cbind(gene=all_genes$gene,padj=all_genes$padj)
all_genes_normal           <- left_join(res_table_normal, Onerka_feature_table, by = "gene")
all_genes_normal           <- all_genes_normal %>% arrange(-log2FoldChange)
all_genes_normal$treatment <- "gonad"
all_genes_apeglm           <- left_join(res_table_apeglm, Onerka_feature_table, by = "gene")
all_genes_apeglm           <- all_genes_apeglm %>% arrange(-log2FoldChange)
# all_genes_apeglm           <- left_join(all_genes_apeglm, as.data.frame(all_genes_pvalue), by = "gene")
all_genes_apeglm$treatment <- "gonad"
all_genes_ashr           <- left_join(res_table_ashr, Onerka_feature_table, by = "gene")
all_genes_ashr           <- all_genes_ashr %>% arrange(-log2FoldChange)
all_genes_ashr$treatment <- "gonad"
# Filter results by
sig_genes <- res_table %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_genes <- left_join(sig_genes, Onerka_feature_table, by = "gene")
sig_genes <- sig_genes %>% arrange(-log2FoldChange)
sig_genes$treatment <- "gonad"
sig_genes_normal <- res_table_normal %>%
filter(abs(log2FoldChange) > lfc.cutoff)
sig_genes_normal <- left_join(sig_genes_normal, Onerka_feature_table, by = "gene")
sig_genes_normal <- sig_genes_normal %>% arrange(-log2FoldChange)
sig_genes_normal$treatment <- "gonad"
sig_genes_apeglm <- res_table_apeglm %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_genes_apeglm <- left_join(sig_genes_apeglm, Onerka_feature_table, by = "gene")
sig_genes_apeglm <- sig_genes_apeglm %>% arrange(-log2FoldChange)
sig_genes_apeglm$treatment <- "gonad"
sig_genes_ashr <- res_table_ashr %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_genes_ashr <- left_join(sig_genes_ashr, Onerka_feature_table, by = "gene")
sig_genes_ashr <- sig_genes_ashr %>% arrange(-log2FoldChange)
sig_genes_ashr$treatment <- "gonad"
# Save single gene expression counts to a data frame object, for each shrinkage estimator
single_gene_expression_unshrunk <- data.frame()
for (i in 1:nrow(sig_genes)){
LOCID <- sig_genes$gene[i]
gene_counts_data <- plotCounts(dds, gene=LOCID, intgroup="trt", returnData=TRUE)
gene_counts_data$gene <- LOCID
gene_counts_data$sample <- row.names(gene_counts_data)
row.names(gene_counts_data) <- NULL
single_gene_expression_unshrunk <- rbind(single_gene_expression_unshrunk,gene_counts_data)
rm(gene_counts_data)
}
single_gene_expression_normal <- data.frame()
for (i in 1:nrow(sig_genes_normal)){
LOCID <- sig_genes_normal$gene[i]
gene_counts_data <- plotCounts(dds, gene=LOCID, intgroup="trt", returnData=TRUE)
gene_counts_data$gene <- LOCID
gene_counts_data$sample <- row.names(gene_counts_data)
row.names(gene_counts_data) <- NULL
single_gene_expression_normal <- rbind(single_gene_expression_normal,gene_counts_data)
rm(gene_counts_data)
}
single_gene_expression_apeglm <- data.frame()
for (i in 1:nrow(sig_genes_apeglm)){
LOCID <- sig_genes_apeglm$gene[i]
gene_counts_data <- plotCounts(dds, gene=LOCID, intgroup="trt", returnData=TRUE)
gene_counts_data$gene <- LOCID
gene_counts_data$sample <- row.names(gene_counts_data)
row.names(gene_counts_data) <- NULL
single_gene_expression_apeglm <- rbind(single_gene_expression_apeglm,gene_counts_data)
rm(gene_counts_data)
}
single_gene_expression_ashr <- data.frame()
for (i in 1:nrow(sig_genes_ashr)){
LOCID <- sig_genes_ashr$gene[i]
gene_counts_data <- plotCounts(dds, gene=LOCID, intgroup="trt", returnData=TRUE)
gene_counts_data$gene <- LOCID
gene_counts_data$sample <- row.names(gene_counts_data)
row.names(gene_counts_data) <- NULL
single_gene_expression_ashr <- rbind(single_gene_expression_ashr,gene_counts_data)
rm(gene_counts_data)
}
write.table(single_gene_expression_unshrunk, file = "DESEQ_output/gonad/GONAD-unshrunk-single-gene-counts.csv", row.names = FALSE)
write.table(single_gene_expression_normal, file = "DESEQ_output/gonad/GONAD-normal-single-gene-counts.csv", row.names = FALSE)
write.table(single_gene_expression_apeglm, file = "DESEQ_output/gonad/GONAD-apeglm-single-gene-counts.csv", row.names = FALSE)
write.table(single_gene_expression_ashr, file = "DESEQ_output/gonad/GONAD-ashr-single-gene-counts.csv", row.names = FALSE)
print(paste("# genes before filtering:", nrow(cts))) # count number of genes before filtering
print(paste("# genes after filtering:", length(dds))) # count number of genes after filtering
print(paste("# of genes dropped:", nrow(cts) - length(dds), sep=" ")) # count number of genes dropped
print(paste("# DEGs, all-genes:", nrow(all_genes)))
print(paste("# DEGs, unshrunken, pvalue = 0.05, lfc = 1.5:", nrow(sig_genes)))
print(paste("# DEGs, normal shrinkage estimator, lfc = 1.5:", nrow(sig_genes_normal)))
print(paste("# DEGs, apeglm shrinkage estimator, svalue = 0.005, lfc = 1.5:", nrow(sig_genes_apeglm)))
print(paste("# DEGs, ashr shrinkage estimator, pvalue = 0.05, lfc = 1.5:", nrow(sig_genes_ashr)))
gene_counts <- as.data.frame(c(nrow(cts),length(dds),(nrow(cts)-length(dds)),nrow(all_genes),
nrow(all_genes_normal),nrow(all_genes_apeglm),nrow(all_genes_ashr),
nrow(sig_genes),nrow(sig_genes_normal),
nrow(sig_genes_apeglm),nrow(sig_genes_ashr)))
row.names(gene_counts) <- c("genes_before_filtering","genes_after_filtering","genes_dropped",
"DEGs_all-genes","DEGs_all-genes-normal",
"DEGs_all-genes-apeglm","DEGs_all-genes-ashr",
"DEG_unshrunken-p0.05_lfc1.5","DEG_normal-lfc1.5",
"DEG_apeglm-s0.005_lfc1.5","DEG_ashr-p0.05_lfc1.5")
colnames(gene_counts) <- "count"
# Output tables of DEGs
write.table(all_genes,        file = "DESEQ_output/gonad/GONAD-ALL-DEG.csv",            row.names = FALSE, sep = ",")
write.table(all_genes_normal, file = "DESEQ_output/gonad/GONAD-ALL-DEG-normal.csv",     row.names = FALSE, sep = ",")
write.table(all_genes_apeglm, file = "DESEQ_output/gonad/GONAD-ALL-DEG-apeglm.csv",     row.names = FALSE, sep = ",")
write.table(all_genes_ashr,   file = "DESEQ_output/gonad/GONAD-ALL-DEG-ashr.csv",       row.names = FALSE, sep = ",")
write.table(sig_genes,        file = "DESEQ_output/gonad/GONAD-SIG-DEG-unshrunken.csv", row.names = FALSE, sep = ",")
write.table(sig_genes_normal, file = "DESEQ_output/gonad/GONAD-SIG-DEG-normal.csv",     row.names = FALSE, sep = ",")
write.table(sig_genes_apeglm, file = "DESEQ_output/gonad/GONAD-SIG-DEG-apeglm.csv",     row.names = FALSE, sep = ",")
write.table(sig_genes_ashr,   file = "DESEQ_output/gonad/GONAD-SIG-DEG-ashr.csv",       row.names = FALSE, sep = ",")
write.table(gene_counts,      file = "DESEQ_output/gonad/GONAD-gene-counts.csv",        row.names = TRUE)
View(res_table_apeglm)
View(res_table_apeglm)
# Volcano plots
ggplot(rest_table_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("red", "grey")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_text_repel(
data = subset(genes, padj < 0.05),
aes(label = Gene),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(res_table_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("red", "grey")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_text_repel(
data = subset(genes, padj < 0.05),
aes(label = Gene),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(res_table_apeglm, aes(x = log2FoldChange, y = -log10(pvalue)))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(res_table_apeglm, aes(x = log2FoldChange, y = pvalue))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(res_table_apeglm, aes(x = log2FoldChange, y = pvalue))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(res_table_apeglm, aes(x = log2FoldChange, y = pvalue)) +
geom_point()
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(all_genes, aes(x = log2FoldChange, y = pvalue)) +
geom_point()
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(all_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point()
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
# Volcano plots
ggplot(all_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(log2FoldChange>0))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
#
# ggsave("analyses/CS/bp_CS_all.png",
#        plot   = bp1,
#        dpi    = 600,
#        device = "png",
#        width  = 4.5,
#        height = 4,
#        units  = "in")
# Volcano plots
ggplot(all_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
#
# ggsave("analyses/CS/bp_CS_all.png",
#        plot   = bp1,
#        dpi    = 600,
#        device = "png",
#        width  = 4.5,
#        height = 4,
#        units  = "in")
# Volcano plots
ggplot(all_genes_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
#
# ggsave("analyses/CS/bp_CS_all.png",
#        plot   = bp1,
#        dpi    = 600,
#        device = "png",
#        width  = 4.5,
#        height = 4,
#        units  = "in")
# Volcano plots
ggplot(all_genes_ashr, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
#
# ggsave("analyses/CS/bp_CS_all.png",
#        plot   = bp1,
#        dpi    = 600,
#        device = "png",
#        width  = 4.5,
#        height = 4,
#        units  = "in")
# Volcano plots
ggplot(all_genes_normal, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# geom_point(aes(color = Significant)) +
# scale_color_manual(values = c("red", "grey")) +
# theme_bw(base_size = 12) + theme(legend.position = "bottom") +
# geom_text_repel(
#     data = subset(genes, padj < 0.05),
#     aes(label = Gene),
#     size = 5,
#     box.padding = unit(0.35, "lines"),
#     point.padding = unit(0.3, "lines"))
#
# ggsave("analyses/CS/bp_CS_all.png",
#        plot   = bp1,
#        dpi    = 600,
#        device = "png",
#        width  = 4.5,
#        height = 4,
#        units  = "in")
View(single_gene_expression_unshrunk)
# Volcano plots
# All genes
p1 <- ggplot(all_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p2 <- ggplot(all_genes_normal, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p3 <- ggplot(all_genes_ashr, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p4 <- ggplot(all_genes_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# Significant Genes
p5 <- ggplot(sig_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p6 <- ggplot(sig_genes_normal, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p7 <- ggplot(sig_genes_ashr, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p8 <- ggplot(sig_genes_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
ggsave("DESEQ_output/gonad/Volcano_all_genes.png",
plot   = p1,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_normal.png",
plot   = p2,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_ashr.png",
plot   = p3,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_apeglm.png",
plot   = p4,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes.png",
plot   = p5,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_normal.png",
plot   = p6,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_ashr.png",
plot   = p7,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_apeglm.png",
plot   = p8,
dpi    = 600,
device = "png",
width  = 4,
height = 4,
units  = "in")
# Volcano plots
# All genes
p1 <- ggplot(all_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p2 <- ggplot(all_genes_normal, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p3 <- ggplot(all_genes_ashr, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p4 <- ggplot(all_genes_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
# Significant Genes
p5 <- ggplot(sig_genes, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p6 <- ggplot(sig_genes_normal, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p7 <- ggplot(sig_genes_ashr, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
p8 <- ggplot(sig_genes_apeglm, aes(x = log2FoldChange, y = -log10(pvalue))) +
geom_point(aes(color=log2FoldChange>0))
ggsave("DESEQ_output/gonad/Volcano_all_genes.png",
plot   = p1,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_normal.png",
plot   = p2,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_ashr.png",
plot   = p3,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_all_genes_apeglm.png",
plot   = p4,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes.png",
plot   = p5,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_normal.png",
plot   = p6,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_ashr.png",
plot   = p7,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
ggsave("DESEQ_output/gonad/Volcano_sig_genes_apeglm.png",
plot   = p8,
dpi    = 600,
device = "png",
width  = 6,
height = 4,
units  = "in")
